
To execute the test programs, please copy the hex instructions into the instr_RAM inside the IFETCH module in the SystemVerilog Code.

Be sure to look into the waveform and check for all related signals to help debug..



// Simple Test Case 1, Exercise ALU --
// Description: Exercise many ALU related instructions --

        instr_RAM[0] = 32'h00000000;     //   nop fill pipeline
        instr_RAM[1] = 32'h00000000;     //   nop fill pipeline
        instr_RAM[2] = 32'h00000000;     //   nop fill pipeline
        instr_RAM[3] = 32'h01004024;     //   and $8,  $8, $0 // register 8 should be 0x0
        instr_RAM[4] = 32'h35080111;     //   ori $8,  $8, 0x111  // register 8 should have the value 0x111
        instr_RAM[5] = 32'h8C090000;     //   lw  $9,  0x0($0)//  register 9 should have the value of 0x55555555
        instr_RAM[6] = 32'h01284820;     //   add $9   $9  $8 // register 9 should have the value of 0x55555666
        instr_RAM[7] = 32'h01284822;     //   sub $9,  $9, $8 // register 9 should have the value of 0x55555555
        instr_RAM[8] = 32'h01285025;     //   or  $10, $9, $8 // register 10 should have the value of 0x55555555
        instr_RAM[9] = 32'h0128582A;     //   slt $11, $9, $8 // register 11 should have the value of 0x0
        instr_RAM[10] = 32'h3C0C0002;     //   lui $12, 0x2    // register 12 should have the value of 0x20000
        


// Simple Test Case 2, Branch and jumps --
// Description: Exercise branch and jump instructions --
// Be sure to check the attached waveform for reference --

        instr_RAM[0] = 32'h00000000;     //   nop fill pipeline
        instr_RAM[1] = 32'h00000000;     //   nop fill pipeline
        instr_RAM[2] = 32'h00000000;     //   nop fill pipeline
        instr_RAM[3]  = 32'h0C000005; // BEG: jal 0x5 // jump to iram index 5 and store return address in $31
        instr_RAM[4]  = 32'h00804020; // add $8 $4 $0
        instr_RAM[5]  = 32'h08000009; // j 0x9 // jump to instruction indexed in 9
        instr_RAM[6]  = 32'h00804020; // add $8 $4 $0
        instr_RAM[7]  = 32'h00804020; // add $8 $4 $0
        instr_RAM[8]  = 32'h08000008; // j 0x8 // jump to iram index 8
        instr_RAM[9]  = 32'h00804020; // add $8 $4 $0 
        instr_RAM[10]  = 32'h00804020; // add $8 $4 $0
        instr_RAM[11]  = 32'h03E00008; // jr $31 // jump register back to iram index 1
        instr_RAM[12] = 32'h1000FFF6; // beq $t0 $t0 BEG // branch back to the beginning




// Simple Test Case 3, Memory Clear Program --
// Description: Clear data memory cell 0 to 11 --

        instr_RAM[0] = 32'h00000000;     //   nop fill pipeline
        instr_RAM[1] = 32'h00000000;     //   nop fill pipeline
        instr_RAM[2] = 32'h00000000;     //   nop fill pipeline
        instr_RAM[3]    = 32'h08000002; //      j 0x2 // need to jump over the next instr
        instr_RAM[4]    = 32'h00080020; //      add $0, $0, $8 // if execute, program will fail
        instr_RAM[5]    = 32'h8c040009; //      lw $4, 0x9($0)  // register 4 should have the value 0x02010101
        instr_RAM[6]    = 32'h8c05000d; //      lw $5, 0xd($0) // register 5 should include the value 0x03020202
        instr_RAM[7]    = 32'h34a50004; //      ori $5, $5, 0x4 // register 5 should have the value of 0x03020206
        instr_RAM[8]    = 32'h00a42822; //      sub $5, $5, $4 // register 5 should have the value of 0x01010105
        instr_RAM[9]    = 32'h34080004; //      ori $8, $0, 0x4 // register 8 should have the value of 0x4
        instr_RAM[10]    = 32'h00003025; //      or $6, $0, $0 // register 6 should have value 0x0
        instr_RAM[11]    = 32'h00a62824; //      and $5 $5 $6 // register 5 should have the value of 0x0
        instr_RAM[12]    = 32'haca50000; //      sw $5, 0x0($5) // store value of 0x0 to dram of 0x0 to 0x3
        instr_RAM[13]    = 32'h00C4382a; //      slt $7, $6, $4 // register 7 should have the value of 1
        instr_RAM[14]    = 32'h00E03820; //      add $7, $7, $0 // register 7 should remain the same
        instr_RAM[15]    = 32'h00A82820; // L1:  add $5, $5, $8 // add 0x4 to register 5
        instr_RAM[16]    = 32'haca00000; //      sw $0, 0x0($5) // store value of 0x0 to dram 
        instr_RAM[17]    = 32'h00C73020; //      add $6, $6, $7 // add one to register 6
        instr_RAM[18]    = 32'h10E6FFFC; //      beq $7 $6, L1 // branch back to L1 when register 7 and 6 are equal           

          


