/* Generated by Yosys 0.9+3541 (git sha1 3030c2b, clang 9.3.0-10ubuntu2 -fPIC -Os) */

module DSP_chain(y_t, clk, rst, x_t);
  reg \initial  = 0;
  wire [12:0] \$1 ;
  wire [8:0] \$10 ;
  wire [11:0] \$12 ;
  wire [8:0] \$14 ;
  wire [12:0] \$16 ;
  wire [8:0] \$2 ;
  wire [9:0] \$4 ;
  wire [8:0] \$6 ;
  wire [10:0] \$8 ;
  input clk;
  input rst;
  input [7:0] x_t;
  reg [7:0] x_t0 = 8'h00;
  reg [7:0] \x_t0$next ;
  reg [7:0] x_t1 = 8'h00;
  reg [7:0] \x_t1$next ;
  reg [7:0] x_t2 = 8'h00;
  reg [7:0] \x_t2$next ;
  wire [7:0] x_t3;
  output [7:0] y_t;
  assign \$10  = $signed(x_t2) * $signed(8'h01);
  assign \$12  = $signed(\$8 ) + $signed(\$10 );
  assign \$14  = $signed(x_t3) * $signed(8'h01);
  assign \$16  = $signed(\$12 ) + $signed(\$14 );
  assign \$2  = $signed(x_t0) * $signed(8'h01);
  assign \$4  = $signed(9'h000) + $signed(\$2 );
  assign \$6  = $signed(x_t1) * $signed(8'h01);
  assign \$8  = $signed(\$4 ) + $signed(\$6 );
  always @(posedge clk)
    x_t2 <= \x_t2$next ;
  always @(posedge clk)
    x_t1 <= \x_t1$next ;
  always @(posedge clk)
    x_t0 <= \x_t0$next ;
  always @* begin
    if (\initial ) begin end
    \x_t0$next  = x_t1;
    casez (rst)
      1'h1:
          \x_t0$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \x_t1$next  = x_t2;
    casez (rst)
      1'h1:
          \x_t1$next  = 8'h00;
    endcase
  end
  always @* begin
    if (\initial ) begin end
    \x_t2$next  = x_t3;
    casez (rst)
      1'h1:
          \x_t2$next  = 8'h00;
    endcase
  end
  assign \$1  = \$16 ;
  assign y_t = \$16 [7:0];
  assign x_t3 = x_t;
endmodule
